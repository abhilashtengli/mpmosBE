
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.1
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.1",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  userCode: 'userCode',
  isVerified: 'isVerified',
  verificationCode: 'verificationCode',
  resetPasswordToken: 'resetPasswordToken',
  resetTokenExpires: 'resetTokenExpires',
  verificationExpires: 'verificationExpires',
  createdAt: 'createdAt',
  updateAt: 'updateAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  implementingAgency: 'implementingAgency',
  title: 'title',
  locationState: 'locationState',
  director: 'director',
  budget: 'budget',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.QuarterScalarFieldEnum = {
  id: 'id',
  number: 'number',
  year: 'year'
};

exports.Prisma.InputDistributionScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  quarterId: 'quarterId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PredefinedInputDistributionScalarFieldEnum = {
  id: 'id',
  inputDistributionId: 'inputDistributionId',
  activityType: 'activityType',
  name: 'name',
  target: 'target',
  achieved: 'achieved',
  district: 'district',
  village: 'village',
  block: 'block',
  remarks: 'remarks',
  units: 'units',
  imageUrl: 'imageUrl',
  imageKey: 'imageKey',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomInputDistributionScalarFieldEnum = {
  id: 'id',
  inputDistributionId: 'inputDistributionId',
  activityType: 'activityType',
  name: 'name',
  target: 'target',
  achieved: 'achieved',
  district: 'district',
  village: 'village',
  block: 'block',
  remarks: 'remarks',
  units: 'units',
  imageUrl: 'imageUrl',
  imageKey: 'imageKey',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrainingScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  quarterId: 'quarterId',
  title: 'title',
  target: 'target',
  achieved: 'achieved',
  district: 'district',
  village: 'village',
  block: 'block',
  beneficiaryMale: 'beneficiaryMale',
  beneficiaryFemale: 'beneficiaryFemale',
  remarks: 'remarks',
  imageUrl: 'imageUrl',
  imageKey: 'imageKey',
  pdfUrl: 'pdfUrl',
  pdfKey: 'pdfKey',
  units: 'units',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.FLDScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  quarterId: 'quarterId',
  description: 'description',
  district: 'district',
  village: 'village',
  block: 'block',
  target: 'target',
  achieved: 'achieved',
  units: 'units',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.AwarenessProgramScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  quarterId: 'quarterId',
  title: 'title',
  target: 'target',
  achieved: 'achieved',
  district: 'district',
  village: 'village',
  block: 'block',
  beneficiaryMale: 'beneficiaryMale',
  beneficiaryFemale: 'beneficiaryFemale',
  imageUrl: 'imageUrl',
  imageKey: 'imageKey',
  units: 'units',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.InfrastructureDevelopmentScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  quarterId: 'quarterId',
  target: 'target',
  achieved: 'achieved',
  district: 'district',
  village: 'village',
  block: 'block',
  remarks: 'remarks',
  imageUrl: 'imageUrl',
  imageKey: 'imageKey',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.UpcomingEventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  date: 'date',
  location: 'location',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.PublicationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  type: 'type',
  category: 'category',
  thumbnailUrl: 'thumbnailUrl',
  thumbnailKey: 'thumbnailKey',
  pdfUrl: 'pdfUrl',
  pdfKey: 'pdfKey',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.GalleryScalarFieldEnum = {
  id: 'id',
  title: 'title',
  imageUrl: 'imageUrl',
  imageKey: 'imageKey',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.ProjectDetailsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  region: 'region',
  year: 'year',
  budget: 'budget',
  center: 'center',
  location: 'location',
  objectives: 'objectives',
  director: 'director',
  coDirectors: 'coDirectors',
  achievements: 'achievements',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  admin: 'admin',
  director: 'director'
};

exports.Status = exports.$Enums.Status = {
  Active: 'Active',
  Completed: 'Completed'
};

exports.Prisma.ModelName = {
  User: 'User',
  Project: 'Project',
  Quarter: 'Quarter',
  InputDistribution: 'InputDistribution',
  PredefinedInputDistribution: 'PredefinedInputDistribution',
  CustomInputDistribution: 'CustomInputDistribution',
  Training: 'Training',
  FLD: 'FLD',
  AwarenessProgram: 'AwarenessProgram',
  InfrastructureDevelopment: 'InfrastructureDevelopment',
  UpcomingEvent: 'UpcomingEvent',
  Publication: 'Publication',
  Gallery: 'Gallery',
  ProjectDetails: 'ProjectDetails'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
