generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String                      @id @default(uuid())
  name                       String                      @db.VarChar(30)
  email                      String                      @unique
  password                   String
  role                       Role
  isVerified                 Boolean                     @default(false) @map("is_verified")
  verificationCode           String?                     @map("verification_code")
  resetPasswordToken         String?                     @map("reset_password_token")
  resetTokenExpires          DateTime?                   @map("reset_token_expires")
  verificationExpires        DateTime?
  createdAt                  DateTime                    @default(now()) @map("created_at")
  updateAt                   DateTime                    @default(now()) @updatedAt @map("updated_at")
  verificationAttempts       Int?
  ActivitiesCategory         ActivitiesCategory[]
  awarenessPrograms          AwarenessProgram[]
  galleries                  Gallery[]
  sessions                   Session[]
  activities                 Activities[]
  compliedReport             CompliedReport[]
  flds                       FLD[]
  infrastructureDevelopments InfrastructureDevelopment[]
  inputDistributions         InputDistribution[]
  projectDetails             ProjectDetails[]
  projectReport              ProjectReport[]
  projects                   Project[]
  publications               Publication[]
  trainings                  Training[]
  upcomingEvents             UpcomingEvent[]

  @@index([email])
  @@index([role])
  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  userAgent String?
  ipAddress String?
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model Project {
  id                         String                      @id @default(uuid())
  implementingAgency         String
  title                      String                      @db.VarChar(255)
  locationState              String
  director                   String
  budget                     Decimal?                    @db.Decimal(12, 2)
  status                     Status                      @default(Active)
  startDate                  DateTime?
  endDate                    DateTime?
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  userId                     String?                     @map("user_id")
  awarenessPrograms          AwarenessProgram[]
  activities                 Activities[]
  flds                       FLD[]
  infrastructureDevelopments InfrastructureDevelopment[]
  inputDistributions         InputDistribution[]
  GeneratedReport            ProjectReport[]
  User                       User?                       @relation(fields: [userId], references: [id])
  trainings                  Training[]

  @@index([title])
  @@index([implementingAgency])
  @@index([locationState])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("projects")
}

model Quarter {
  id                         String                      @id @default(uuid())
  number                     Int
  year                       Int
  awarenessPrograms          AwarenessProgram[]
  activities                 Activities[]
  flds                       FLD[]
  infrastructureDevelopments InfrastructureDevelopment[]
  inputDistributions         InputDistribution[]
  trainings                  Training[]

  @@unique([number, year])
  @@index([year])
  @@map("quarters")
}

model InputDistribution {
  id               String   @id @default(uuid())
  projectId        String   @map("project_id")
  quarterId        String   @map("quarter_id")
  userId           String?  @map("user_id")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  inputDistId      String   @unique
  achieved         Int?
  activityType     String   @db.VarChar(100)
  block            String   @db.VarChar(100)
  district         String   @db.VarChar(100)
  imageKey         String?
  imageUrl         String?
  name             String   @db.VarChar(200)
  remarks          String?  @db.VarChar(300)
  target           Int?
  units            String?  @db.VarChar(20)
  village          String   @db.VarChar(100)
  achievedSentence String[] @default([])
  targetSentence   String[] @default([])
  project          Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  quarter          Quarter  @relation(fields: [quarterId], references: [id])
  User             User?    @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([quarterId])
  @@index([userId])
  @@index([activityType])
  @@index([district, village, block])
  @@index([createdAt])
  @@map("input_distributions")
}

model Training {
  id                String   @id @default(uuid())
  projectId         String   @map("project_id")
  quarterId         String   @map("quarter_id")
  title             String   @db.VarChar(255)
  target            Int?
  achieved          Int?
  district          String   @db.VarChar(100)
  village           String   @db.VarChar(100)
  block             String   @db.VarChar(100)
  beneficiaryMale   Int      @default(0) @map("beneficiary_male")
  beneficiaryFemale Int      @default(0) @map("beneficiary_female")
  remarks           String?  @db.VarChar(300)
  imageUrl          String?  @map("image_url")
  imageKey          String?  @map("image_key")
  pdfUrl            String?  @map("pdf_url")
  pdfKey            String?  @map("pdf_key")
  units             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String?  @map("user_id")
  trainingId        String   @unique
  achievedSentence  String[] @default([])
  targetSentence    String[] @default([])
  project           Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  quarter           Quarter  @relation(fields: [quarterId], references: [id])
  User              User?    @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([quarterId])
  @@index([userId])
  @@index([title])
  @@index([district, village, block])
  @@index([createdAt])
  @@map("trainings")
}

model FLD {
  id               String   @id @default(uuid())
  projectId        String   @map("project_id")
  quarterId        String   @map("quarter_id")
  district         String   @db.VarChar(100)
  village          String   @db.VarChar(100)
  block            String   @db.VarChar(100)
  target           Int?
  achieved         Int?
  units            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           String?  @map("user_id")
  fldId            String   @unique
  remarks          String?  @db.VarChar(300)
  achievedSentence String[] @default([])
  targetSentence   String[] @default([])
  project          Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  quarter          Quarter  @relation(fields: [quarterId], references: [id])
  User             User?    @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([quarterId])
  @@index([userId])
  @@map("flds")
}

model AwarenessProgram {
  id                String   @id @default(uuid())
  title             String   @db.VarChar(100)
  target            Int?
  achieved          Int?
  district          String   @db.VarChar(100)
  village           String   @db.VarChar(100)
  block             String   @db.VarChar(100)
  imageUrl          String?
  imageKey          String?
  units             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  beneficiaryFemale Int      @default(0) @map("beneficiary_female")
  beneficiaryMale   Int      @default(0) @map("beneficiary_male")
  projectId         String   @map("project_id")
  quarterId         String   @map("quarter_id")
  userId            String?  @map("user_id")
  awarnessprogramId String   @unique
  remarks           String?  @db.VarChar(300)
  achievedSentence  String[] @default([])
  targetSentence    String[] @default([])
  project           Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  quarter           Quarter  @relation(fields: [quarterId], references: [id])
  User              User?    @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([quarterId])
  @@index([title])
  @@index([district, village, block])
  @@index([createdAt])
}

model InfrastructureDevelopment {
  id               String   @id @default(uuid())
  projectId        String   @map("project_id")
  quarterId        String   @map("quarter_id")
  target           Int?
  achieved         Int?
  district         String   @db.VarChar(100)
  village          String   @db.VarChar(100)
  block            String   @db.VarChar(100)
  remarks          String?  @db.VarChar(300)
  imageUrl         String?
  imageKey         String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           String?  @map("user_id")
  InfraDevId       String   @unique
  title            String   @db.VarChar(100)
  achievedSentence String[] @default([])
  targetSentence   String[] @default([])
  project          Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  quarter          Quarter  @relation(fields: [quarterId], references: [id])
  User             User?    @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([quarterId])
  @@index([userId])
  @@index([district, village, block])
  @@index([createdAt])
  @@map("infrastructure_developments")
}

model UpcomingEvent {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(100)
  date        DateTime
  location    String   @db.VarChar(100)
  description String?  @db.VarChar(300)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?  @map("user_id")
  User        User?    @relation(fields: [userId], references: [id])

  @@index([date])
  @@index([location])
  @@index([userId])
  @@map("upcoming_events")
}

model Publication {
  id           String   @id @default(uuid())
  title        String   @db.VarChar(100)
  type         String   @db.VarChar(100)
  category     String?  @db.VarChar(100)
  thumbnailUrl String?
  thumbnailKey String?
  pdfUrl       String?
  pdfKey       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String?  @map("user_id")
  User         User?    @relation(fields: [userId], references: [id])

  @@index([title])
  @@index([type])
  @@index([category])
  @@index([userId])
  @@map("publications")
}

model Gallery {
  id        String   @id @default(uuid())
  title     String   @db.VarChar(100)
  imageUrl  String
  imageKey  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?  @map("user_id")
  User      User?    @relation(fields: [userId], references: [id])

  @@index([title])
}

model ProjectDetails {
  id           String   @id @default(uuid())
  title        String   @db.VarChar(300)
  region       String
  year         Int
  budget       Float?
  center       String?  @db.VarChar(300)
  location     String?  @db.VarChar(200)
  objectives   String[]
  director     String   @db.VarChar(100)
  coDirectors  String[]
  achievements String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String?  @map("user_id")
  User         User?    @relation(fields: [userId], references: [id])

  @@index([title])
  @@index([region])
  @@index([year])
  @@index([center])
  @@index([location])
  @@index([director])
  @@index([userId])
  @@map("project_details")
}

model ActivitiesCategory {
  id         String       @id @default(uuid())
  name       String       @db.VarChar(30)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  userId     String?      @map("user_id")
  User       User?        @relation(fields: [userId], references: [id])
  activities Activities[]
}

model Activities {
  id                 String             @id @default(uuid())
  activityId         String             @unique
  activityCategoryId String
  projectId          String             @map("project_id")
  quarterId          String             @map("quarter_id")
  title              String             @db.VarChar(255)
  target             Int?
  achieved           Int?
  district           String             @db.VarChar(100)
  village            String             @db.VarChar(100)
  block              String             @db.VarChar(100)
  beneficiaryMale    Int                @default(0) @map("beneficiary_male")
  beneficiaryFemale  Int                @default(0) @map("beneficiary_female")
  remarks            String?            @db.VarChar(300)
  imageUrl           String?            @map("image_url")
  imageKey           String?            @map("image_key")
  pdfUrl             String?            @map("pdf_url")
  pdfKey             String?            @map("pdf_key")
  units              String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  userId             String?            @map("user_id")
  achievedSentence   String[]           @default([])
  targetSentence     String[]           @default([])
  activityCategory   ActivitiesCategory @relation(fields: [activityCategoryId], references: [id], onDelete: Cascade)
  project            Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  quarter            Quarter            @relation(fields: [quarterId], references: [id])
  User               User?              @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([quarterId])
  @@index([userId])
  @@index([title])
  @@index([district, village, block])
  @@index([createdAt])
  @@map("activities")
}

model ProjectReport {
  id        String   @id @default(uuid())
  projectId String
  quarter   String
  year      Int
  fileName  String
  fileKey   String
  fileUrl   String
  userId    String?  @map("user_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  User      User?    @relation(fields: [userId], references: [id])

  @@index([projectId, userId])
  @@map("project_reports")
}

model CompliedReport {
  id        String   @id @default(uuid())
  quarter   String
  year      Int
  fileName  String
  fileKey   String
  fileUrl   String
  userId    String?  @map("user_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("complied_reports")
}

model ReportCount {
  id        String   @id @default(uuid())
  count     Int      @default(0)
  updatedAt DateTime @updatedAt

  @@map("report_count")
}

enum Role {
  admin
  director
}

enum Status {
  Active
  Completed
}
