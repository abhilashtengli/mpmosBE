// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

enum Role {
  admin
  director
}

enum Status {
  Active
  Completed
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String                      @id @default(uuid())
  name                       String                      @db.VarChar(30)
  email                      String                      @unique
  password                   String
  role                       Role
  isVerified                 Boolean                     @default(false) @map("is_verified")
  verificationCode           String?                     @map("verification_code")
  resetPasswordToken         String?                     @map("reset_password_token")
  resetTokenExpires          DateTime?                   @map("reset_token_expires")
  verificationExpires        DateTime?
  createdAt                  DateTime                    @default(now()) @map("created_at")
  updateAt                   DateTime                    @default(now()) @updatedAt @map("updated_at")
  verificationAttempts       Int?
  projects                   Project[]
  trainings                  Training[]
  flds                       FLD[]
  awarenessPrograms          AwarenessProgram[]
  infrastructureDevelopments InfrastructureDevelopment[]
  inputDistributions         InputDistribution[]
  upcomingEvents             UpcomingEvent[]
  publications               Publication[]
  galleries                  Gallery[]
  projectDetails             ProjectDetails[]

  @@index([email])
  @@index([role])
  @@map("user")
}

model Project {
  id                         String                      @id @default(uuid())
  implementingAgency         String
  title                      String                      @db.VarChar(255)
  locationState              String
  director                   String
  budget                     Decimal?                    @db.Decimal(12, 2)
  status                     Status                      @default(Active)
  startDate                  DateTime?
  endDate                    DateTime?
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  trainings                  Training[]
  flds                       FLD[]
  awarenessPrograms          AwarenessProgram[]
  infrastructureDevelopments InfrastructureDevelopment[]
  inputDistributions         InputDistribution[]

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  // Indexes for frequently queried fields
  @@index([title])
  @@index([implementingAgency])
  @@index([locationState])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("projects")
}

model Quarter {
  id                         String                      @id @default(uuid())
  number                     Int // Should be between 1 and 4
  year                       Int
  trainings                  Training[]
  flds                       FLD[]
  awarenessPrograms          AwarenessProgram[]
  inputDistributions         InputDistribution[]
  infrastructureDevelopments InfrastructureDevelopment[]

  // Validator for number - implement in application code instead of @range
  // as Prisma doesn't support @range validator

  @@unique([number, year])
  @@index([year])
  @@map("quarters")
}

model InputDistribution {
  id              String                        @id @default(uuid())
  inputDistId     String
  project         Project                       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       String                        @map("project_id")
  quarter         Quarter                       @relation(fields: [quarterId], references: [id], onDelete: Cascade)
  quarterId       String                        @map("quarter_id")
  predefinedItems PredefinedInputDistribution[]
  customItems     CustomInputDistribution[]
  User            User?                         @relation(fields: [userId], references: [id])
  userId          String?                       @map("user_id")
  createdAt       DateTime                      @default(now())
  updatedAt       DateTime                      @updatedAt

  // Indexes for foreign keys and timestamps - improve join performance
  @@index([projectId])
  @@index([quarterId])
  @@index([userId])
  @@index([createdAt])
  @@map("input_distributions")
}

model PredefinedInputDistribution {
  id                  String            @id @default(uuid())
  inputDistribution   InputDistribution @relation(fields: [inputDistributionId], references: [id], onDelete: Cascade)
  inputDistributionId String            @map("input_distribution_id")
  activityType        String // Seed Distribution/Planting materials/Fertilizers/etc.
  name                String            @db.VarChar(200)
  target              Int
  achieved            Int
  district            String            @db.VarChar(100)
  village             String            @db.VarChar(100)
  block               String            @db.VarChar(100)
  remarks             String?           @db.VarChar(300)
  units               String?           @db.VarChar(20)
  imageUrl            String?
  imageKey            String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  // Indexes for foreign keys and filtering fields
  @@index([inputDistributionId])
  @@index([activityType])
  @@index([district, village, block]) // Compound index for location filtering
  @@map("predefined_input_distributions")
}

model CustomInputDistribution {
  id                  String            @id @default(uuid())
  inputDistribution   InputDistribution @relation(fields: [inputDistributionId], references: [id], onDelete: Cascade)
  inputDistributionId String            @map("input_distribution_id")
  activityType        String            @db.VarChar(100) // Manually added
  name                String            @db.VarChar(200)
  target              Int
  achieved            Int
  district            String            @db.VarChar(100)
  village             String            @db.VarChar(100)
  block               String            @db.VarChar(100)
  remarks             String?           @db.VarChar(300)
  units               String?           @db.VarChar(20)
  imageUrl            String?
  imageKey            String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  // Indexes for foreign keys and filtering fields
  @@index([inputDistributionId])
  @@index([activityType])
  @@index([district, village, block]) // Compound index for location filtering
  @@map("custom_input_distributions")
}

model Training {
  id                String   @id @default(uuid())
  trainingId        String
  project           Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId         String   @map("project_id")
  quarter           Quarter  @relation(fields: [quarterId], references: [id], onDelete: Cascade)
  quarterId         String   @map("quarter_id")
  title             String   @db.VarChar(255)
  target            Int
  achieved          Int
  district          String   @db.VarChar(100)
  village           String   @db.VarChar(100)
  block             String   @db.VarChar(100)
  beneficiaryMale   Int      @default(0) @map("beneficiary_male")
  beneficiaryFemale Int      @default(0) @map("beneficiary_female")
  remarks           String?  @db.VarChar(300)
  imageUrl          String?  @map("image_url")
  imageKey          String?  @map("image_key")
  pdfUrl            String?  @map("pdf_url")
  pdfKey            String?  @map("pdf_key")
  units             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  User              User?    @relation(fields: [userId], references: [id])
  userId            String?  @map("user_id")

  // Indexes for better query performance
  @@index([projectId])
  @@index([quarterId])
  @@index([userId])
  @@index([title])
  @@index([district, village, block])
  @@index([createdAt])
  @@map("trainings")
}

model FLD {
  id          String   @id @default(uuid())
  fldId       String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String   @map("project_id")
  quarter     Quarter  @relation(fields: [quarterId], references: [id], onDelete: Cascade)
  quarterId   String   @map("quarter_id")
  description String?  @db.VarChar(200)
  district    String   @db.VarChar(100)
  village     String   @db.VarChar(100)
  block       String   @db.VarChar(100)
  target      Int
  achieved    Int
  units       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?  @map("user_id")

  // Indexes for foreign keys
  @@index([projectId])
  @@index([quarterId])
  @@index([userId])
  @@map("flds")
}

model AwarenessProgram {
  id                String   @id @default(uuid())
  awarnessprogramId String
  project           Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId         String   @map("project_id")
  quarter           Quarter  @relation(fields: [quarterId], references: [id], onDelete: Cascade)
  quarterId         String   @map("quarter_id")
  title             String   @db.VarChar(100)
  target            Int
  achieved          Int
  district          String   @db.VarChar(100)
  village           String   @db.VarChar(100)
  block             String   @db.VarChar(100)
  beneficiaryMale   Int      @default(0) @map("beneficiary_male")
  beneficiaryFemale Int      @default(0) @map("beneficiary_female")
  imageUrl          String?
  imageKey          String?
  units             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  User              User?    @relation(fields: [userId], references: [id])
  userId            String?  @map("user_id")

  // Indexes for better query performance
  @@index([projectId])
  @@index([quarterId])
  @@index([title])
  @@index([district, village, block])
  @@index([createdAt])
}

model InfrastructureDevelopment {
  id         String   @id @default(uuid())
  InfraDevId String
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String   @map("project_id")
  quarter    Quarter  @relation(fields: [quarterId], references: [id], onDelete: Cascade)
  quarterId  String   @map("quarter_id")
  target     Int
  achieved   Int
  district   String   @db.VarChar(100)
  village    String   @db.VarChar(100)
  block      String   @db.VarChar(100)
  remarks    String?  @db.VarChar(300)
  imageUrl   String?
  imageKey   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?  @map("user_id")

  // Indexes for better query performance
  @@index([projectId])
  @@index([quarterId])
  @@index([userId])
  @@index([district, village, block])
  @@index([createdAt])
  @@map("infrastructure_developments")
}

model UpcomingEvent {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(100)
  date        DateTime
  location    String   @db.VarChar(100)
  description String?  @db.VarChar(300)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?  @map("user_id")

  @@index([date]) // For sorting/filtering by date
  @@index([location]) // For location-based queries
  @@index([userId])
  @@map("upcoming_events")
}

model Publication {
  id           String   @id @default(uuid())
  title        String   @db.VarChar(100)
  type         String   @db.VarChar(100) // nutrition guide, cultivation guide, health guide 
  category     String?  @db.VarChar(100)
  thumbnailUrl String?
  thumbnailKey String?
  pdfUrl       String?
  pdfKey       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  User         User?    @relation(fields: [userId], references: [id])
  userId       String?  @map("user_id")

  @@index([title])
  @@index([type])
  @@index([category])
  @@index([userId])
  @@map("publications")
}

model Gallery {
  id        String   @id @default(uuid())
  title     String   @db.VarChar(100)
  imageUrl  String
  imageKey  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @map("user_id")

  @@index([title]) // For search functionality
}

model ProjectDetails {
  id           String   @id @default(uuid())
  title        String   @db.VarChar(100)
  region       String // NEH or AICRP 
  year         Int
  budget       Float?
  center       String?  @db.VarChar(100)
  location     String?  @db.VarChar(100)
  objectives   String[] // Array of objectives
  director     String   @db.VarChar(100)
  coDirectors  String[] // Array of co-directors
  achievements String[] // Array of achievements
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  User         User?    @relation(fields: [userId], references: [id])
  userId       String?  @map("user_id")

  @@index([title])
  @@index([region])
  @@index([year])
  @@index([center])
  @@index([location])
  @@index([director])
  @@index([userId])
  @@map("project_details")
}
